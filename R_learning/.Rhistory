combined_data1 <- bind_rows(combined_data1,temp_df1)
}
# 绘制3D统计图
plot <- plot_ly(combined_data, x = ~br, y = ~sr, z = ~fn,
type = "scatter3d", mode = "markers", marker = list(size = 2))
plot
combined_data <- data.frame()
combined_data1 <- data.frame()
# 循环读取每个文件并合并数据
for (i in 1:1024) {
# 构造文件名
file_name <- paste0("~/mm/Data/bits_results_for_pku_math_competition/bit", i, ".json")
# 读取JSON文件
data <- fromJSON(file_name)
# 提取br、sr
br <- data$br[1]
sr <- data$sr[1]
fn <- mean(data$fn[1])
imb <- data$imbalance_force[3]
rop <- data$rop[3]
# 将这些值合并到一个数据框中
temp_df <- data.frame(br = br, sr = sr, fn = fn)
temp_df1 <- data.frame(imb = imb,rop = rop)
# 将临时数据框添加到combined_data中
combined_data <- bind_rows(combined_data, temp_df)
combined_data1 <- bind_rows(combined_data1,temp_df1)
}
# 绘制3D统计图
plot <- plot_ly(combined_data, x = ~br, y = ~sr, z = ~fn,
type = "scatter3d", mode = "markers", marker = list(size = 2))
plot
combined_data <- data.frame()
combined_data1 <- data.frame()
# 循环读取每个文件并合并数据
for (i in 1:1024) {
# 构造文件名
file_name <- paste0("~/mm/Data/bits_results_for_pku_math_competition/bit", i, ".json")
# 读取JSON文件
data <- fromJSON(file_name)
# 提取br、sr
br <- data$br[1]
sr <- data$sr[1]
fn <- mean(data$fn[2])
imb <- data$imbalance_force[3]
rop <- data$rop[3]
# 将这些值合并到一个数据框中
temp_df <- data.frame(br = br, sr = sr, fn = fn)
temp_df1 <- data.frame(imb = imb,rop = rop)
# 将临时数据框添加到combined_data中
combined_data <- bind_rows(combined_data, temp_df)
combined_data1 <- bind_rows(combined_data1,temp_df1)
}
# 绘制3D统计图
plot <- plot_ly(combined_data, x = ~br, y = ~sr, z = ~fn,
type = "scatter3d", mode = "markers", marker = list(size = 2))
plot
combined_data <- data.frame()
combined_data1 <- data.frame()
# 循环读取每个文件并合并数据
for (i in 1:1024) {
# 构造文件名
file_name <- paste0("~/mm/Data/bits_results_for_pku_math_competition/bit", i, ".json")
# 读取JSON文件
data <- fromJSON(file_name)
# 提取br、sr
br <- data$br[1]
sr <- data$sr[1]
fn <- mean(data$fn[3])
imb <- data$imbalance_force[3]
rop <- data$rop[3]
# 将这些值合并到一个数据框中
temp_df <- data.frame(br = br, sr = sr, fn = fn)
temp_df1 <- data.frame(imb = imb,rop = rop)
# 将临时数据框添加到combined_data中
combined_data <- bind_rows(combined_data, temp_df)
combined_data1 <- bind_rows(combined_data1,temp_df1)
}
# 绘制3D统计图
plot <- plot_ly(combined_data, x = ~br, y = ~sr, z = ~fn,
type = "scatter3d", mode = "markers", marker = list(size = 2))
plot
combined_data <- data.frame()
combined_data1 <- data.frame()
# 循环读取每个文件并合并数据
for (i in 1:1024) {
# 构造文件名
file_name <- paste0("~/mm/Data/bits_results_for_pku_math_competition/bit", i, ".json")
# 读取JSON文件
data <- fromJSON(file_name)
# 提取br、sr
br <- data$br[10]
sr <- data$sr[10]
fn <- mean(data$fn[1])
imb <- data$imbalance_force[3]
rop <- data$rop[3]
# 将这些值合并到一个数据框中
temp_df <- data.frame(br = br, sr = sr, fn = fn)
temp_df1 <- data.frame(imb = imb,rop = rop)
# 将临时数据框添加到combined_data中
combined_data <- bind_rows(combined_data, temp_df)
combined_data1 <- bind_rows(combined_data1,temp_df1)
}
# 绘制3D统计图
plot <- plot_ly(combined_data, x = ~br, y = ~sr, z = ~fn,
type = "scatter3d", mode = "markers", marker = list(size = 2))
plot
combined_data <- data.frame()
combined_data1 <- data.frame()
# 循环读取每个文件并合并数据
for (i in 1:1024) {
# 构造文件名
file_name <- paste0("~/mm/Data/bits_results_for_pku_math_competition/bit", i, ".json")
# 读取JSON文件
data <- fromJSON(file_name)
# 提取br、sr
br <- data$br[10]
sr <- data$sr[10]
fn <- mean(data$fn[2])
imb <- data$imbalance_force[3]
rop <- data$rop[3]
# 将这些值合并到一个数据框中
temp_df <- data.frame(br = br, sr = sr, fn = fn)
temp_df1 <- data.frame(imb = imb,rop = rop)
# 将临时数据框添加到combined_data中
combined_data <- bind_rows(combined_data, temp_df)
combined_data1 <- bind_rows(combined_data1,temp_df1)
}
# 绘制3D统计图
plot <- plot_ly(combined_data, x = ~br, y = ~sr, z = ~fn,
type = "scatter3d", mode = "markers", marker = list(size = 2))
plot
combined_data <- data.frame()
combined_data1 <- data.frame()
# 循环读取每个文件并合并数据
for (i in 1:1024) {
# 构造文件名
file_name <- paste0("~/mm/Data/bits_results_for_pku_math_competition/bit", i, ".json")
# 读取JSON文件
data <- fromJSON(file_name)
# 提取br、sr
br <- data$br[10]
sr <- data$sr[10]
fn <- mean(data$fn[3])
imb <- data$imbalance_force[3]
rop <- data$rop[3]
# 将这些值合并到一个数据框中
temp_df <- data.frame(br = br, sr = sr, fn = fn)
temp_df1 <- data.frame(imb = imb,rop = rop)
# 将临时数据框添加到combined_data中
combined_data <- bind_rows(combined_data, temp_df)
combined_data1 <- bind_rows(combined_data1,temp_df1)
}
# 绘制3D统计图
plot <- plot_ly(combined_data, x = ~br, y = ~sr, z = ~fn,
type = "scatter3d", mode = "markers", marker = list(size = 2))
plot
combined_data <- data.frame()
combined_data1 <- data.frame()
# 循环读取每个文件并合并数据
for (i in 1:1024) {
# 构造文件名
file_name <- paste0("~/mm/Data/bits_results_for_pku_math_competition/bit", i, ".json")
# 读取JSON文件
data <- fromJSON(file_name)
# 提取br、sr
br <- data$br[33]
sr <- data$sr[33]
fn <- mean(data$fn[1])
imb <- data$imbalance_force[3]
rop <- data$rop[3]
# 将这些值合并到一个数据框中
temp_df <- data.frame(br = br, sr = sr, fn = fn)
temp_df1 <- data.frame(imb = imb,rop = rop)
# 将临时数据框添加到combined_data中
combined_data <- bind_rows(combined_data, temp_df)
combined_data1 <- bind_rows(combined_data1,temp_df1)
}
# 绘制3D统计图
plot <- plot_ly(combined_data, x = ~br, y = ~sr, z = ~fn,
type = "scatter3d", mode = "markers", marker = list(size = 2))
plot
combined_data <- data.frame()
combined_data1 <- data.frame()
# 循环读取每个文件并合并数据
for (i in 1:1024) {
# 构造文件名
file_name <- paste0("~/mm/Data/bits_results_for_pku_math_competition/bit", i, ".json")
# 读取JSON文件
data <- fromJSON(file_name)
# 提取br、sr
br <- data$br[33]
sr <- data$sr[33]
fn <- mean(data$fn[2])
imb <- data$imbalance_force[3]
rop <- data$rop[3]
# 将这些值合并到一个数据框中
temp_df <- data.frame(br = br, sr = sr, fn = fn)
temp_df1 <- data.frame(imb = imb,rop = rop)
# 将临时数据框添加到combined_data中
combined_data <- bind_rows(combined_data, temp_df)
combined_data1 <- bind_rows(combined_data1,temp_df1)
}
# 绘制3D统计图
plot <- plot_ly(combined_data, x = ~br, y = ~sr, z = ~fn,
type = "scatter3d", mode = "markers", marker = list(size = 2))
plot
combined_data <- data.frame()
combined_data1 <- data.frame()
# 循环读取每个文件并合并数据
for (i in 1:1024) {
# 构造文件名
file_name <- paste0("~/mm/Data/bits_results_for_pku_math_competition/bit", i, ".json")
# 读取JSON文件
data <- fromJSON(file_name)
# 提取br、sr
br <- data$br[33]
sr <- data$sr[33]
fn <- mean(data$fn[3])
imb <- data$imbalance_force[3]
rop <- data$rop[3]
# 将这些值合并到一个数据框中
temp_df <- data.frame(br = br, sr = sr, fn = fn)
temp_df1 <- data.frame(imb = imb,rop = rop)
# 将临时数据框添加到combined_data中
combined_data <- bind_rows(combined_data, temp_df)
combined_data1 <- bind_rows(combined_data1,temp_df1)
}
# 绘制3D统计图
plot <- plot_ly(combined_data, x = ~br, y = ~sr, z = ~fn,
type = "scatter3d", mode = "markers", marker = list(size = 2))
plot
library(readxl)
install.packages(readxl)
install.packages(readxl)
library(ggplot2)
install.packages(ggplot2)
install.packages(ggplot2)
install.packages(readxl)
install.packages(readxl)
library(ggplot2)
library(ggplot2)
all_data = read.csv("./data.csv")
standard_1 = unlist(all_data[1])
standard_2 = unlist(all_data[2])
standard_ave = (standard_1 + standard_2) / 2.0
test1 = unlist(all_data[3])
test2 = unlist(all_data[4])
test_ave = (test1 + test2) / 2.0
standard_protein = 200 * c(0,4,8,12,16,20) / 20
df = data.frame(standard_ave,standard_protein)
ggplot(df,aes(x=standard_protein,y=standard_ave))+geom_point()+geom_smooth(method = "lm")
all_data = read.csv("./data.csv")
standard_1 = unlist(all_data[1])
standard_2 = unlist(all_data[2])
standard_ave = (standard_1 + standard_2) / 2.0
test1 = unlist(all_data[3])
test2 = unlist(all_data[4])
test_ave = (test1 + test2) / 2.0
standard_protein = 200 * c(0,4,8,12,16,20) / 20
df = data.frame(standard_ave,standard_protein)
standard_1
all_data = read.csv("./data.csv")
standard_1 = unlist(all_data[1])
standard_2 = unlist(all_data[2])
standard_ave = (standard_1 + standard_2) / 2.0
test1 = unlist(all_data[3])
test2 = unlist(all_data[4])
df = data.frame(standard_ave[:-2],standard_protein)
standard_protein = 200 * c(0,4,8,12,16,20) / 20
df = data.frame(standard_ave[-tail(length(standard_ave,2))],standard_protein)
df = data.frame(standard_ave[-tail(length(standard_ave),2)],standard_protein)
df = data.frame(head(standard_ave,-2),standard_protein)
ggplot(df,aes(x=standard_protein,y=standard_ave))+geom_point()+geom_smooth(method = "lm")
View(df)
View(df)
View(df)
View(df)
ggplot(df,aes(x=head.standard_ave...2.,y=standard_ave))+geom_point()+geom_smooth(method = "lm")
ggplot(df,aes(x=standard_protein,y=head.standard_ave...2.))+geom_point()+geom_smooth(method = "lm")
l = lm(standard_ave~standard_protein,data = df)
library(readxl)
library(ggplot2)
all_data = read.csv("./data.csv")
standard_1 = unlist(all_data[1])
standard_2 = unlist(all_data[2])
standard_ave = (standard_1 + standard_2) / 2.0
standard_ave = head(standard_ave,-2)
test1 = unlist(all_data[3])
test2 = unlist(all_data[4])
test_ave = (test1 + test2) / 2.0
standard_protein = 200 * c(0,4,8,12,16,20) / 20
df = data.frame(standard_ave,standard_protein)
ggplot(df,aes(x=standard_protein,y=standard_ave))+geom_point()+geom_smooth(method = "lm")
l = lm(standard_ave~standard_protein,data = df)
summaey(l)
summary(l)
k = coefficients(l)
k = coefficients(l)[2]
b = coefficients(l)[1]
library(readxl)
library(ggplot2)
all_data = read.csv("./data.csv")
standard_1 = unlist(all_data[1])
standard_2 = unlist(all_data[2])
standard_ave = (standard_1 + standard_2) / 2.0
standard_ave = head(standard_ave,-2)
test1 = unlist(all_data[3])
test2 = unlist(all_data[4])
test_ave = (test1 + test2) / 2.0
standard_protein = 200 * c(0,4,8,12,16,20) / 20
df = data.frame(standard_ave,standard_protein)
ggplot(df,aes(x=standard_protein,y=standard_ave))+geom_point()+geom_smooth(method = "lm")
standard_protein = 200 * c(20,16,12,8,4,0) / 20
standard_protein = 200 * c(20,16,12,8,4,0) / 20
df = data.frame(standard_ave,standard_protein)
ggplot(df,aes(x=standard_protein,y=standard_ave))+geom_point()+geom_smooth(method = "lm")
l = lm(standard_ave~standard_protein,data = df)
summary(l)
library(readxl)
library(ggplot2)
all_data = read.csv("./data.csv")
standard_1 = unlist(all_data[1])
standard_2 = unlist(all_data[2])
standard_ave = (standard_1 + standard_2) / 2.0
standard_ave = head(standard_ave,-2)
test1 = unlist(all_data[3])
test2 = unlist(all_data[4])
test_ave = (test1 + test2) / 2.0
standard_protein = 200 * c(0,4,8,12,16,20) / 20
df = data.frame(standard_ave,standard_protein)
all_data = read.csv("./data.csv")
standard_1 = unlist(all_data[1])
standard_2 = unlist(all_data[2])
standard_ave = (standard_1 + standard_2) / 2.0
standard_ave = head(standard_ave,-2)
test1 = unlist(all_data[3])
test2 = unlist(all_data[4])
test_ave = (test1 + test2) / 2.0
standard_protein = 200 * c(0,4,8,12,16,20) / 20
df = data.frame(standard_ave,standard_protein)
ggplot(df,aes(x=standard_protein,y=standard_ave))+geom_point()+geom_smooth(method = "lm")
l = lm(standard_ave~standard_protein,data = df)
summary(l)
k = coefficients(l)[2]
b = coefficients(l)[1]
standard_protein = 200 * c(20,16,12,8,4,0) / 20
df = data.frame(standard_ave,standard_protein)
ggplot(df,aes(x=standard_protein,y=standard_ave))+geom_point()+geom_smooth(method = "lm")
library(readxl)
library(ggplot2)
all_data = read.csv("./data.csv")
standard_1 = unlist(all_data[1])
standard_2 = unlist(all_data[2])
standard_ave = (standard_1 + standard_2) / 2.0
standard_ave = head(standard_ave,-2)
test1 = unlist(all_data[3])
test2 = unlist(all_data[4])
test_ave = (test1 + test2) / 2.0
standard_protein = 200 * c(20,16,12,8,4,0) / 20
df = data.frame(standard_ave,standard_protein)
ggplot(df,aes(x=standard_protein,y=standard_ave))+geom_point()+geom_smooth(method = "lm")
l = lm(standard_ave~standard_protein,data = df)
summary(l)
k = coefficients(l)[2]
b = coefficients(l)[1]
library(readxl)
library(ggplot2)
all_data = read.csv("./data.csv")
standard_1 = unlist(all_data[1])
standard_2 = unlist(all_data[2])
standard_ave = (standard_1 + standard_2) / 2.0
standard_ave = head(standard_ave,-2)
test1 = unlist(all_data[3])
test2 = unlist(all_data[4])
test_ave = (test1 + test2) / 2.0
standard_protein = 200 * c(20,16,12,8,4,0) / 20
df = data.frame(standard_ave,standard_protein)
ggplot(df,aes(x=standard_protein,y=standard_ave))+geom_point()+geom_smooth(method = "lm")
l = lm(standard_ave~standard_protein,data = df)
summary(l)
k = coefficients(l)[2]
b = coefficients(l)[1]
test_ave = (test1 + test2) / 2
test_protein = (test_ave - b)/k
test_protein
b
test_protein
rna_data <- data.frame(
type = c("lncRNA", "miRNA", "misc_RNA", "processed_pseudogene", "pseudogene",
"rRNA", "rRNA_pseudogene", "snoRNA", "snRNA", "TEC",
"transcribed_processed_pseudogene", "unprocessed_pseudogene", "protein_coding"),
count = c(330, 29, 24, 182, 188, 9, 5, 15, 21, 28, 6, 41, 232)
)
pie(rna_data$count, labels = rna_data$type,
main = "RNA Type Distribution")
legend("topright", legend = rna_data$type, fill = rainbow(length(rna_data$type)),
cex = 0.7, title = "RNA Types")
# 创建数据框
rna_data <- data.frame(
type = c("lncRNA", "miRNA", "misc_RNA", "processed_pseudogene", "pseudogene",
"rRNA", "rRNA_pseudogene", "snoRNA", "snRNA", "TEC",
"transcribed_processed_pseudogene", "unprocessed_pseudogene", "protein_coding"),
count = c(330, 29, 24, 182, 188, 9, 5, 15, 21, 28, 6, 41, 232)
)
pie(rna_data$count, labels = rna_data$type,
main = "RNA Type Distribution",
col = rainbow(length(rna_data$type))) # 使用彩虹色填充
# 添加图例
legend("topright", legend = rna_data$type, fill = rainbow(length(rna_data$type)),
cex = 0.7, title = "RNA Types")
# 创建数据框
rna_data <- data.frame(
type = c("lncRNA", "miRNA", "misc_RNA", "processed_pseudogene", "pseudogene",
"rRNA", "rRNA_pseudogene", "snoRNA", "snRNA", "TEC",
"transcribed_processed_pseudogene", "unprocessed_pseudogene", "protein_coding"),
count = c(330, 29, 24, 182, 188, 9, 5, 15, 21, 28, 6, 41, 232)
)
# 绘制饼图
ggplot2::bar(rna_data$count, labels = rna_data$type,
main = "RNA Type Distribution",
col = rainbow(length(rna_data$type))) # 使用彩虹色填充
# 添加图例
legend("topright", legend = rna_data$type, fill = rainbow(length(rna_data$type)),
cex = 0.7, title = "RNA Types")
ggplot(rna_data) + pie()
# 添加图例
legend("topright", legend = rna_data$type, fill = rainbow(length(rna_data$type)),
cex = 0.7, title = "RNA Types")
# 绘制饼图
library(ggplot2)
ggplot(rna_data) + pie()
# 创建数据框
rna_data <- data.frame(
type = c("lncRNA", "miRNA", "misc_RNA", "processed_pseudogene", "pseudogene",
"rRNA", "rRNA_pseudogene", "snoRNA", "snRNA", "TEC",
"transcribed_processed_pseudogene", "unprocessed_pseudogene", "protein_coding","IG_V_gene"),
x = c(330, 29, 24, 182, 188, 9, 5, 15, 21, 28, 6, 41, 232,1)
)
# 绘制饼图
library(ggplot2)
ggplot(rna_data) + pie()
ggplot(rna_data,ase(count,type)) + geom_bar()
ggplot(rna_data,aes(count,type)) + geom_bar()
# 创建数据框
rna_data <- data.frame(
type = c("lncRNA", "miRNA", "misc_RNA", "processed_pseudogene", "pseudogene",
"rRNA", "rRNA_pseudogene", "snoRNA", "snRNA", "TEC",
"transcribed_processed_pseudogene", "unprocessed_pseudogene", "protein_coding","IG_V_gene"),
count = c(330, 29, 24, 182, 188, 9, 5, 15, 21, 28, 6, 41, 232,1)
)
# 绘制饼图
library(ggplot2)
ggplot(rna_data,aes(count,type)) + geom_bar()
ggplot(rna_data,aes(x="",y=count)) + geom_bar()
# 创建数据框
rna_data <- data.frame(
type = c("lncRNA", "miRNA", "misc_RNA", "processed_pseudogene", "pseudogene",
"rRNA", "rRNA_pseudogene", "snoRNA", "snRNA", "TEC",
"transcribed_processed_pseudogene", "unprocessed_pseudogene", "protein_coding","IG_V_gene"),
count = c(330, 29, 24, 182, 188, 9, 5, 15, 21, 28, 6, 41, 232,1)
)
rna_data$percent <- rna_data$count / sum(rna_data$count) * 100
# 绘制饼图
library(ggplot2)
ggplot(rna_data,aes(x="",y=count,fill=type)) +
geom_bar(stat = "identity")+
theme_void() +
labs(title = "RNA Type Proportions")
ggplot(rna_data,aes(x="",y=count,fill=type)) +
pie(stat = "identity")+
theme_void() +
labs(title = "RNA Type Proportions")
ggplot(rna_data,aes(x="",y=count,fill=type)) +
geom_bar(stat = "identity")+
theme_void() +
labs(title = "RNA Type Proportions")+
scale_fill_brewer(palette = "Set3")+
theme(legend.position = "right")
# 绘制饼图
library(ggplot2)
ggplot(rna_data,aes(x="",y=count,fill=type)) +
geom_bar(stat = "identity")+
coord_polar("y",start = 0)+
theme_void() +
labs(title = "RNA Type Proportions")+
scale_fill_brewer(palette = "Set3")+
theme(legend.position = "right")
ggplot(rna_data,aes(x="",y=count,fill=type)) +
geom_bar(stat = "identity")+
coord_polar("y",start = 0)+
theme_void() +
labs(title = "RNA Type Proportions")+
theme(legend.position = "right")
# 创建数据框
rna_data <- data.frame(
type = c("lncRNA", "miRNA", "misc_RNA", "processed_pseudogene", "pseudogene",
"rRNA", "rRNA_pseudogene", "snoRNA", "snRNA", "TEC",
"transcribed_processed_pseudogene", "unprocessed_pseudogene", "protein_coding","IG_V_gene"),
count = c(330, 29, 24, 135, 1, 4, 5, 15, 21, 28, 6, 41, 232,1)
)
rna_data$percent <- rna_data$count / sum(rna_data$count) * 100
# 绘制饼图
library(ggplot2)
ggplot(rna_data,aes(x="",y=count,fill=type)) +
geom_bar(stat = "identity")+
coord_polar("y",start = 0)+
theme_void() +
labs(title = "RNA Type Proportions")+
theme(legend.position = "right")
# 添加图例
legend("topright", legend = rna_data$type, fill = rainbow(length(rna_data$type)),
cex = 0.7, title = "RNA Types")
