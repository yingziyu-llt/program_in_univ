/*
 * Copyright (C) 2024 Letian Lin <yingziyu-Lin@outlook.com>
 *
 * Distributed under terms of the GNU AGPLv3+ license.
 *
 * Run for our better future!
 */

#include <iomanip>
#include <ios>
#include <iostream>
#include <ostream>
#include <vector>

class Warrior {
	int color;
	static const char KINDNAMES[5][10];

public:
	static int nRedWarriorCountTotal,
		nBlueWarriorCountTotal; // Red = 0
	static int nRedStrengthTotal, nBlueStrengthTotal;
	static int nTime;
	Warrior(int col, int ki, int cost, int now_num)
		: color(col)
	{
		if (col == 0)
			nRedWarriorCountTotal++, nRedStrengthTotal -= cost,
				std::cout << std::setw(3) << std::setfill('0') << nTime << " red " << KINDNAMES[ki] << " " << nRedWarriorCountTotal << " born with strength " << cost << "," << now_num << " " << KINDNAMES[ki] << " in red headquarter" << std::endl;
		else
			nBlueWarriorCountTotal++, nBlueStrengthTotal -= cost,
				std::cout << std::setw(3) << std::setfill('0') << nTime << " blue " << KINDNAMES[ki] << " " << nBlueWarriorCountTotal << " born with strength " << cost << "," << now_num << " " << KINDNAMES[ki] << " in blue headquarter" << std::endl;
	}
}; // nRedWarriorCountTotal是红方士兵总数，strength_total是生命元总数
const char Warrior::KINDNAMES[5][10] = { "dragon", "ninja", "iceman", "lion", "wolf" };
int Warrior::nRedWarriorCountTotal = 0, Warrior::nBlueWarriorCountTotal = 0;
int Warrior::nRedStrengthTotal = 0, Warrior::nBlueStrengthTotal = 0;
int Warrior::nTime = 0;

class WarriorWithWeapon : public Warrior {
public:
	static const char WEAPONS[3][10];
	int nWeapon;
	WarriorWithWeapon(int col, int nCost, int kind, int count)
		: Warrior(col, kind, nCost, count)
	{
		nWeapon = count % 3;
		std::cout << "It has a " << WEAPONS[nWeapon];
	}
	WarriorWithWeapon(int col, int nCost, int kind, int count, int k)
		: Warrior(col, kind, nCost, count)
	{
	}
};
const char WarriorWithWeapon::WEAPONS[3][10] = { "sword", "bomb", "arrow" };

class Iceman : public WarriorWithWeapon {
public:
	static int nCost;
	static int nRedCount, nBlueCount;
	Iceman(int col)
		: WarriorWithWeapon(col, nCost, 2, (col == 0 ? nRedWarriorCountTotal : nBlueWarriorCountTotal) + 1)
	{
		if (col == 0)
			nRedCount++;
		else
			nBlueCount++;
		std::cout << std::endl;
	}
};
int Iceman::nCost = 0, Iceman::nBlueCount = 0, Iceman::nRedCount = 0;
class Dragon : WarriorWithWeapon {
public:
	static int nCost, nRedCount, nBlueCount;
	double morale;
	Dragon(int col)
		: WarriorWithWeapon(col, nCost, 0, (col == 0 ? nRedWarriorCountTotal : nBlueWarriorCountTotal) + 1)
	{
		if (col == 0) {
			morale = (double)nRedStrengthTotal / (double)nCost;
			nRedCount++;
		} else {
			morale = (double)nBlueStrengthTotal / (double)nCost;
			nBlueCount++;
		}
		std::cout << ",and it's morale is " << std::fixed << std::setprecision(2) << morale << std::endl;
	}
};
int Dragon::nCost = 0, Dragon::nRedCount = 0, Dragon::nBlueCount = 0;
class Ninja : public WarriorWithWeapon {
public:
	int nWeapon[2];
	static int nCost, nRedCount, nBlueCount;
	Ninja(int col)
		: WarriorWithWeapon(col, nCost, 1, (col == 0 ? nRedCount : nBlueCount) + 1, 1)
	{
		if (col == 0) {
			nRedCount++;
			nWeapon[0] = Warrior::nRedWarriorCountTotal % 3, nWeapon[1] = Warrior::nRedWarriorCountTotal % 3 + 1;
		} else {
			nBlueCount++;
			nWeapon[0] = Warrior::nBlueWarriorCountTotal % 3, nWeapon[1] = Warrior::nBlueWarriorCountTotal % 3 + 1;
		}
		std::cout << "It has a " << WEAPONS[nWeapon[0]] << " and a " << WEAPONS[nWeapon[1]] << std::endl;
	}
};
int Ninja::nCost = 0, Ninja::nRedCount = 0, Ninja::nBlueCount = 0;
class Lion : public Warrior {
public:
	static int nCost, nRedCount, nBlueCount;
	int loyalty;
	Lion(int col)
		: Warrior(col, 3, nCost, (col == 0 ? nRedCount : nBlueCount) + 1)
	{
		if (col == 0) {
			nRedCount++, loyalty = nRedStrengthTotal;
		} else {
			nBlueCount++, loyalty = nBlueStrengthTotal;
		}
		std::cout << "It's loyalty is " << loyalty << std::endl;
	}
};
int Lion::nCost = 0, Lion::nRedCount = 0, Lion::nBlueCount = 0;
class Wolf : public Warrior {
public:
	static int nCost, nRedCount, nBlueCount;
	Wolf(int col)
		: Warrior(col, 4, nCost, (col == 0 ? nRedCount : nBlueCount) + 1)
	{
		if (col == 0) {
			nRedCount++;
		} else {
			nBlueCount++;
		}
	}
};
int Wolf::nCost = 0, Wolf::nRedCount = 0, Wolf::nBlueCount = 0;

const int RED_ORDER[5] = { 2, 3, 4, 1, 0 }, BLUE_ORDER[] = { 3, 0, 1, 2, 4 };

bool available(int xx, int total)
{
	switch (xx) {
	case 0:
		return Dragon::nCost <= total;
	case 1:
		return Ninja::nCost <= total;
	case 2:
		return Iceman::nCost <= total;
	case 3:
		return Lion::nCost <= total;
	case 4:
		return Wolf::nCost <= total;
	default:
		return false;
	}
}

void initialize()
{
	Warrior::nRedWarriorCountTotal = 0, Warrior::nBlueWarriorCountTotal = 0;
	Warrior::nRedStrengthTotal = 0, Warrior::nBlueStrengthTotal = 0;
	Warrior::nTime = 0;
	Wolf::nCost = 0, Wolf::nRedCount = 0, Wolf::nBlueCount = 0;
	Lion::nCost = 0, Lion::nRedCount = 0, Lion::nBlueCount = 0;
	Ninja::nCost = 0, Ninja::nRedCount = 0, Ninja::nBlueCount = 0;
	Iceman::nCost = 0, Iceman::nBlueCount = 0, Iceman::nRedCount = 0;
	Dragon::nCost = 0, Dragon::nRedCount = 0, Dragon::nBlueCount = 0;
}

std::vector<Warrior*> blue_warriors, red_warriors;

int main()
{
	int test_cases;
	std::cin >> test_cases;
	int cur_case = 1;
	while (cur_case <= test_cases) {
		initialize();
		int M;
		std::cin >> M;
		Warrior::nBlueStrengthTotal = M, Warrior::nRedStrengthTotal = M;
		std::cin >> Dragon::nCost >> Ninja::nCost >> Iceman::nCost >> Lion::nCost >> Wolf::nCost;
		std::cout << "Case:" << cur_case << std::endl;
		cur_case++;
		int red_cur = 0, blue_cur = 0;
		int red_flag = 0, blue_flag = 0;
		while (1) {
			int try_cnt = 0;
			for (try_cnt = 0; try_cnt < 5 && red_flag == 0; try_cnt++) {
				bool flag = 1;
				if (available(RED_ORDER[red_cur], Warrior::nRedStrengthTotal)) {
					flag = 0;
					Warrior* a;
					switch (RED_ORDER[red_cur]) {
					case 0:
						a = (Warrior*)new Dragon(0);
						break;

					case 1:
						a = (Warrior*)new Ninja(0);
						break;

					case 2:
						a = (Warrior*)new Iceman(0);
						break;

					case 3:
						a = (Warrior*)new Lion(0);
						break;

					case 4:
						a = (Warrior*)new Wolf(0);
						break;

					default:
						break;
					}
					red_warriors.push_back(a);
				}
				red_cur++;
				red_cur %= 5;
				if (!flag)
					break;
			}
			if (try_cnt >= 5) {
				red_flag = 1;
			}
			if (red_flag == 1)
				std::cout << std::setw(3) << std::setfill('0') << Warrior::nTime << " red headquarter stops making warriors" << std::endl, red_flag = 2;
			for (try_cnt = 0; try_cnt < 5 && blue_flag == 0; try_cnt++) {
				bool flag = 1;
				if (available(BLUE_ORDER[blue_cur], Warrior::nBlueStrengthTotal)) {
					flag = 0;
					Warrior* a;
					switch (BLUE_ORDER[blue_cur]) {
					case 0:
						a = (Warrior*)new Dragon(1);
						break;

					case 1:
						a = (Warrior*)new Ninja(1);
						break;

					case 2:
						a = (Warrior*)new Iceman(1);
						break;

					case 3:
						a = (Warrior*)new Lion(1);
						break;

					case 4:
						a = (Warrior*)new Wolf(1);
						break;

					default:
						break;
					}
					blue_warriors.push_back(a);
				}
				blue_cur++;
				blue_cur %= 5;
				if (!flag)
					break;
			}
			if (try_cnt >= 5) {
				blue_flag = 1;
			}
			if (blue_flag == 1)
				std::cout << std::setw(3) << std::setfill('0') << Warrior::nTime << " blue headquarter stops making warriors" << std::endl, blue_flag = 2;
			Warrior::nTime++;
			if (red_flag == 2 && blue_flag == 2)
				break;
		}
		while (!red_warriors.empty())
			delete red_warriors.back();
	}
}
